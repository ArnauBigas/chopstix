#!/usr/bin/env sh
#
# ----------------------------------------------------------------------------
#
# Copyright 2019 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# ----------------------------------------------------------------------------
#

set -eu

die() { echo "$*" ; exit 1 ; }

usage() {
    echo "Usage: chop-trace2mpt [-i <id>] -o <out> [-h] [--trace-dir <dir>] [--gzip]"
    echo "Options:"
    echo "  -h,--help          Display this help and exit"
    echo "  -i,--id <id>       Trace id. If not provided all id in the directory will be processed."
    echo "  -o,--output <out>  Output base path. i.e. (<out>.<id>.mpt <out>.<id>.mps will be generated)"
    echo "  --trace-dir <dir>  Path to trace directory (default: $PWD/trace_data)"
    echo "  --gzip             Zip trace output files"
    exit 0;
}

id=
output=
trace=$PWD/trace_data
gzip=

TEMP=$(getopt -o 'hi:o:' -l 'help,id:,output:,trace-dir:,gzip' -n 'chop-trace2mpt' -- "$@")

[ $# -ne 0 ] || usage

eval set -- "$TEMP"

while true ; do
    case "$1" in
        -h|--help) usage; shift;;
        -i|--id) id=$2; shift 2;;
        -o|--output) output=$2; shift 2;;
        --trace-dir) trace=$2; shift 2;;
        --gzip) gzip=1; shift;;
        --) shift; break ;;
        *) echo "Internal error!"; exit 1;;
    esac
done

[ -n "$trace" ] && die "Trace dir '$trace' does not exists"
[ -z "$output" ] && die "Error: No output path"

if [ -z "$id" ]; then
    echo "Detecting IDs in trace dir '$trace'"

    if [ "$(find "$trace/" -name info.\* | wc -l)" -eq 0 ]; then
        echo "No IDs detected"
        exit 1
    fi

    # shellcheck disable=SC2012
    lid=$(ls "$trace"/info.* | sed -e "s/.gz$//g" | xargs -n 1 basename | cut -d "." -f 2 | sort | paste -sd ' ')
    echo "IDs detected: $lid"
else
    lid="$id"
fi

boutput="$output"
if [ -n "$(dirname "$boutput")" ]; then
    mkdir -p "$(dirname "$boutput")"
fi

cd "$(dirname "$boutput")" || exit
boutput="$(pwd)/$(basename "$boutput")"
# shellcheck disable=SC2103
cd - > /dev/null 2>&1 

cd "$trace"

for id in $lid; do

    output="$boutput.$id"

    [ -f "$output.mpt" ] && die "Error: Output '$output.mpt' already exists"
    [ -f "$output.mps" ] && die "Error: Output '$output.mps' already exists"
    if [ -n "$gzip" ] ; then
        [ -f "$output.mpt.gz" ] && die "Error: Output '$output.mpt.gz' already exists"
        [ -f "$output.mps.gz" ] && die "Error: Output '$output.mps.gz' already exists"
    fi

    output="$(readlink -f "$output")"
    mkdir -p "${output%/*}"

    cat_cmd="cat"
    suffix=
    if [ -f "info.0.gz" ] ; then
        cat_cmd="zcat"
        suffix=".gz"
    fi

    [ -f "info.$id$suffix" ] || die "No trace with id $id"

    # pagesize="$(getconf PAGESIZE)"

    is_obj() {

        temp=$(mktemp)
        $cat_cmd "maps.$id$suffix" > "$temp"
        addr=$(printf "%d" "0x$1")

        while read -r line; do

            addrlow=$(printf "%d" "0x$(echo "$line" | cut -d ' ' -f 1 | cut -d '-' -f 1)")
            addrhigh=$(printf "%d" "0x$(echo "$line" | cut -d ' ' -f 1 | cut -d '-' -f 2)")
            permissions=$(echo "$line" | cut -d ' ' -f 2) 
            orig=$(echo "$line" | cut -d ' ' -f 6)
           
            if [ -z "$orig" ]; then
                orig="anonymous"
            fi

            orig="$(basename "$orig")"
            if [ "$addr" -ge "$addrlow" ] && [ "$addr" -lt "$addrhigh" ]; then
                if [ "$permissions" = "r-xp" ]; then
                    ret="code $orig"
                elif [ "$permissions" = "rw-p" ]; then
                    ret="data $orig"
                elif [ "$permissions" = "r--p" ]; then
                    ret="data $orig"
                elif [ "$permissions" = "---p" ]; then
                    ret="data $orig"
                else
                    ret="unk $permissions $orig"
                fi
                echo "$ret"
                break
            fi
            
        done < "$temp";
        rm -f "$temp"
    }

    fmt_data() {
        addr=$(printf "%d" "0x$1")
        data="$2"
        printf "M 0x%016X $($cat_cmd "$data" | hexdump -v | cut -d " " -f 2-9 | head -n -1 | tr -d ' '| paste -sd "")\\n" "$addr"
    }

    fmt_text() {
        addr=$(printf "%d" "0x$1")
        data=$2
        $cat_cmd "$data" | hexdump | awk -v base="$addr" '
    !/\*/ && NF > 2 {
        addr = base + strtonum("0x"$1)
        printf "  0x%x:\n", addr
        print  "    0x"$3$2
        print  "    0x"$5$4
        print  "    0x"$7$6
        print  "    0x"$9$8
    }'
    }

    echo "Starting the generation of: $output.mps $output.mpt"
    default_address=$($cat_cmd "info.$id$suffix" | awk '{print $2}')

    echo "Default address: $default_address"

    # Process registers
    echo "Processing registers ..."
    $cat_cmd "regs.$id$suffix" | while read -r line ; do
        echo "R $line"
    done > "$output.mps"
    echo "$(wc -l < "$output.mps") registers processed!"

    # MPT Preamble
    {
    echo "[MPT]"
    echo "mpt_version = 0.5"
    echo
    echo "[STATE]"
    if [ -n "$gzip" ] ; then
        echo "contents = $(basename "$output").mps.gz"
    else
        echo "contents = $(basename "$output").mps"
    fi
    echo
    echo "[CODE]"
    echo "default_address = 0x$default_address"
    echo "instructions="
    } > "$output.mpt"

    # Process memory
    # shellcheck disable=SC2012
    ls -tr page."$id".* 2>/dev/null | awk 'BEGIN{FS="."}{print $0,$3}' | while read -r page addr ; do
        obj=$(is_obj "$addr")
        if [ "$(echo "$obj" | grep -c "code " )" -eq 0 ]; then
            echo "  Page $addr $obj"
            echo "; $addr $obj" >> "$output.mps"
            fmt_data "$addr" "$page" >> "$output.mps"
        else
            echo "  Page $addr $obj"
            echo "  ; $addr $obj" >> "$output.mpt"
            fmt_text "$addr" "$page" >> "$output.mpt"
        fi
    done

    if [ -n "$gzip" ] ; then
        echo "Compressing outputs..."
        gzip "$output.mps"
        gzip "$output.mpt"
        echo "Output stored in : $output.mps.gz $output.mpt.gz"
    else
        echo "Output stored in : $output.mps $output.mpt"
    fi

done;
